{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/victor/HD1/Projetos/ReactJS/NLW_5/Projeto-Podcastr/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingSate(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      togglePlay,\n      setPlayingSate\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/media/victor/HD1/Projetos/ReactJS/NLW_5/Projeto-Podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","togglePlay","setPlayingSate","state"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAuC,OAAvC;AAqBA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAEP,OAAO,SAASG,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA2C;AAC9C,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAA+CP,QAAQ,CAAC,CAAD,CAA7D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEF,WAASU,IAAT,CAAcC,OAAd,EAAsB;AACpBN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACC;;AAEH,WAASG,UAAT,GAAqB;AACnBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACC;;AACH,WAASK,cAAT,CAAwBC,KAAxB,EAAsC;AAChCL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACH;;AACH,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACV,MAAAA,WAAD;AAAaE,MAAAA,mBAAb;AAAkCI,MAAAA,IAAlC;AAAwCF,MAAAA,SAAxC;AAAmDI,MAAAA,UAAnD;AAA+DC,MAAAA;AAA/D,KAA/B;AAAA,cAEKV;AAFL;AAAA;AAAA;AAAA;AAAA,UADF;AAQD","sourcesContent":["import { createContext, useState} from 'react';\n\ntype Episode={\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;  \n    isPlaying : boolean;\n    play: (episode: Episode)=> void;\n    togglePlay: ()=> void;\n    setPlayingSate: (state:boolean)=> void;\n\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\nexport function PlayerContextProvider({ children}){\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex]= useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n\n  function play(episode){\n    setEpisodeList([episode])\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n    }\n\n  function togglePlay(){\n    setIsPlaying(!isPlaying);\n    }\n  function setPlayingSate(state:boolean){\n        setIsPlaying(state);\n    }\n  return (\n    <PlayerContext.Provider value={{episodeList,currentEpisodeIndex, play, isPlaying, togglePlay, setPlayingSate}}>\n\n        {children}\n\n    </PlayerContext.Provider>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}