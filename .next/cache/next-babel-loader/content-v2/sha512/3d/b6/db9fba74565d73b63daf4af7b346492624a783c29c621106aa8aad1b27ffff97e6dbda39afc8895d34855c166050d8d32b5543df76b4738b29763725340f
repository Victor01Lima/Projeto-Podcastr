{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/victor/HD1/Projetos/ReactJS/NLW_5/Projeto-Podcastr/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingSate(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < setEpisodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      return;\n    }\n\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  function playPrevius() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      isPlaying,\n      playNext,\n      playPrevius,\n      togglePlay,\n      setPlayingSate,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/media/victor/HD1/Projetos/ReactJS/NLW_5/Projeto-Podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlay","setPlayingSate","state","hasPrevious","hasNext","length","playNext","playPrevius"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAkD,OAAlD;AA0BA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAOP,OAAO,SAASG,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAAuE;AAC1E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAA+CP,QAAQ,CAAC,CAAD,CAA7D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEF,WAASU,IAAT,CAAcC,OAAd,EAA+B;AAC7BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACC;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAiD;AAC7CT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAKH,WAASM,UAAT,GAAqB;AACnBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACC;;AACH,WAASQ,cAAT,CAAwBC,KAAxB,EAAsC;AAChCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACH;;AAED,QAAMC,WAAW,GAAGZ,mBAAmB,GAAG,CAA1C;AACA,QAAMa,OAAO,GAAIb,mBAAmB,GAAG,CAAvB,GAA4BD,cAAc,CAACe,MAA3D;;AAEA,WAASC,QAAT,GAAmB;AACf,QAAGF,OAAH,EAAW;AACP;AACH;;AACDZ,IAAAA,sBAAsB,CAACD,mBAAmB,GAAC,CAArB,CAAtB;AACH;;AAED,WAASgB,WAAT,GAAsB;AAClB,QAAGJ,WAAH,EAAe;AACXX,MAAAA,sBAAsB,CAACD,mBAAmB,GAAC,CAArB,CAAtB;AACH;AAEJ;;AAGH,sBACE,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAE;AACHF,MAAAA,WADG;AAEHE,MAAAA,mBAFG;AAGHI,MAAAA,IAHG;AAIHE,MAAAA,QAJG;AAKHJ,MAAAA,SALG;AAMHa,MAAAA,QANG;AAOHC,MAAAA,WAPG;AAQHP,MAAAA,UARG;AASHC,MAAAA,cATG;AAUHG,MAAAA,OAVG;AAWHD,MAAAA;AAXG,KADP;AAAA,cAgBKf;AAhBL;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD","sourcesContent":["import { createContext, useState, ReactNode} from 'react';\n\ntype Episode={\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;  \n    isPlaying : boolean;\n    play: (episode: Episode)=> void;\n    playList: (list: Episode[], index:number)=> void;\n    togglePlay: ()=> void;\n    playNext: ()=> void;\n    playPrevius: ()=> void;\n    hasNext: Boolean;\n    hasPrevius: Boolean;\n    setPlayingSate: (state:boolean)=> void;\n\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n    children : ReactNode;\n}\n\n\nexport function PlayerContextProvider({ children}: PlayerContextProviderProps){\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex]= useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n\n  function play(episode: Episode){\n    setEpisodeList([episode])\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number){\n        setEpisodeList(list);\n        setCurrentEpisodeIndex(index);\n        setIsPlaying(true);\n    }\n\n\n\n\n  function togglePlay(){\n    setIsPlaying(!isPlaying);\n    }\n  function setPlayingSate(state:boolean){\n        setIsPlaying(state);\n    }\n\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = (currentEpisodeIndex + 1) < setEpisodeList.length;\n\n    function playNext(){\n        if(hasNext){\n            return;\n        }\n        setCurrentEpisodeIndex(currentEpisodeIndex+1);\n    }\n\n    function playPrevius(){\n        if(hasPrevious){\n            setCurrentEpisodeIndex(currentEpisodeIndex-1);\n        }\n\n    }\n\n\n  return (\n    <PlayerContext.Provider \n    value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        playList,\n        isPlaying,\n        playNext,\n        playPrevius,\n        togglePlay,\n        setPlayingSate,\n        hasNext,\n        hasPrevious,\n        }}\n        >\n\n        {children}\n\n    </PlayerContext.Provider>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}